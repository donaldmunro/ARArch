function(get_ndk NDK)
   set(NDK_ $ENV{NDK_ROOT})
   if (NDK_ STREQUAL "")
      set(NDK_ $ENV{NDK})
   endif()
   if (NDK_ STREQUAL "")
      message(FATAL_ERROR "Please set the NDK_ROOT or NDK environment variable to point to the NDK base directory.")
   endif()
   get_filename_component(NDK_ ${NDK_} REALPATH)
   if(IS_DIRECTORY ${NDK_})
      set(${NDK} "${NDK_}" PARENT_SCOPE)
   else()
      message(FATAL_ERROR "Please set the NDK_ROOT environment variable to point to the NDK base directory (${NDK}).")
   endif()
endfunction()

function(get_git _STATUS _PATH _LIBDIR _NAME _REPO)
   set(is_clone FALSE)
   set(dir "${_LIBDIR}/${_NAME}")
   set(git_dir "${dir}/.git")
   if (EXISTS ${dir} AND EXISTS ${git_dir})
      execute_process(COMMAND git pull WORKING_DIRECTORY ${dir} RESULT_VARIABLE status)
   else()
      set(is_clone TRUE)
      file(MAKE_DIRECTORY ${dir})
      execute_process(COMMAND git clone ${_REPO} ${dir} WORKING_DIRECTORY ${_LIBDIR} RESULT_VARIABLE status)
   endif()
   set(${_STATUS} "${status}" PARENT_SCOPE)
   set(${_PATH} "${dir}" PARENT_SCOPE)
   if (NOT "${status}" STREQUAL "0")
      if(is_clone)
         message(FATAL_ERROR "Fatal error cloning ${dir}")
      endif()
   endif()
endfunction()

function(cmake_configure _STATUS _PATH _BUILD_DIR_NAME _CMAKE_ARGLIST)
   set(build_dir "${_PATH}/${_BUILD_DIR_NAME}")
   if(EXISTS "${build_dir}")
      file(REMOVE_RECURSE ${build_dir})
   endif()
   file(MAKE_DIRECTORY "${build_dir}")
   if(NOT EXISTS "${build_dir}")
      message(FATAL_ERROR "Fatal error creating directory ${build_dir}")
   endif()
   execute_process(COMMAND ${CMAKE_COMMAND} ${_CMAKE_ARGLIST} ..
                   WORKING_DIRECTORY "${build_dir}"
                   RESULT_VARIABLE status)
   if(NOT "${status}" STREQUAL "0")
      message(FATAL_ERROR "Running cmake configure on ${_PATH} for architecture ")
   endif()
   set(${_STATUS} "${status}" PARENT_SCOPE)
endfunction()

# execute_process(COMMAND ${CMAKE_COMMAND} --build "${build_dir}"
#                      WORKING_DIRECTORY "${build_dir}" RESULT_VARIABLE status)
#    if(NOT "${status}" STREQUAL "0")
#       message(FATAL_ERROR "Building TBB for architecture " ${ANDROID_ABI})
#    endif()
