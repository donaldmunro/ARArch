declare -a ABIs=("arm64-v8a" "armeabi-v7a" "x86" "x86_64") #armeabi-v7a with NEON
export ANDROID_SDK=/media/opt/android-sdk
export ANDROID_NDK=/media/opt/android-sdk/ndk/latest #latest is a (manually created) symlink
#CMAKE="$ANDROID_SDK/cmake/3.6.4111459/bin/cmake"
CMAKE="$ANDROID_SDK/cmake/3.18.1/bin/cmake"
GIT="/usr/bin/git"
BASE=$(realpath ..)
DIR=$(realpath .)
BUILD="build-android"
TARGET_BASE="/opt/opencv-android-new"
#BUILD_SHARED="ON" #OFF = static (.a) only
BUILD_SHARED="OFF"
BUILD_TOOLS="30.0.2"
API_LEVEL=25

echo $DIR
if [ $# -gt 0 ] && [ $1 = "init" ]
then
   cd $BASE
   $GIT clone https://github.com/Itseez/opencv.git
   cd $DIR
   $GIT clone https://github.com/Itseez/opencv_contrib.git
fi
cd $DIR
$GIT pull
cd opencv_contrib
$GIT pull
cd ..

rm -rf $BUILD CMakeCache.txt CMakeFiles/ CMakeVars.txt
for ABI in "${ABIs[@]}"
do
#   TARGET="/opt/opencv-android-$ABI"
   TARGET="$TARGET_BASE""/$ABI"
   TARGET="${TARGET// /-}"
   echo $ABI $TARGET
   mkdir -p $BUILD/$ABI
   cd $BUILD/$ABI
   $CMAKE -GNinja -DTARGET_ARCH=ANDROID -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK/build/cmake/android.toolchain.cmake -DANDROID_TOOLCHAIN=clang \
   -DANDROID_NDK=$ANDROID_NDK -DANDROID_STL=c++_static -DOPENCV_ENABLE_NONFREE=YES -DBUILD_SHARED_LIBS=$BUILD_SHARED -DWITH_MATLAB=NO \
   -DENABLE_PRECOMPILED_HEADERS=OFF -DCMAKE_BUILD_WITH_INSTALL_RPATH=ON -DBUILD_PERF_TESTS=OFF -DBUILD_TESTS=OFF -DINSTALL_TESTS=OFF \
   -DBUILD_EXAMPLES=NO -DINSTALL_PYTHON_EXAMPLES=NO -DENABLE_SSE=NO -DENABLE_SSE2=NO -DENABLE_SSE3=NO -DENABLE_SSE41=NO -DENABLE_SSE42=NO \
   -DENABLE_SSSE3=NO -DWITH_OPENCL=NO -DWITH_CUFFT=NO -DWITH_CAROTENE=NO -DWITH_CUDA=NO -DWITH_EIGEN=YES -DWITH_IPP=NO -DWITH_OPENJPEG=NO \
   -DOPENCV_EXTRA_MODULES_PATH="$DIR/opencv_contrib/modules"  -DCMAKE_BUILD_TYPE=Release -DANDROID_SDK_TARGET=22 -DBUILD_opencv_dnn=NO \
   -DBUILD_opencv_hdf=NO -DANDROID_ABI="$ABI" -DANDROID_SDK_BUILD_TOOLS_VERSION=$BUILD_TOOLS -DBUILD_ANDROID_PROJECTS=OFF \
   -DBUILD_ANDROID_EXAMPLES=NO -DBUILD_opencv_java=OFF -DANDROID_NATIVE_API_LEVEL=$API_LEVEL -DBUILD_opencv_cudacodec=OFF -DBUILD_opencv_ovis=NO \
   -DBUILD_TIFF=OFF -DCMAKE_INSTALL_PREFIX="$TARGET" "$DIR"
#    $CMAKE -GNinja -DTARGET_ARCH=ANDROID -DANDROID_TOOLCHAIN=clang -DANDROID_STL=c++_static -DOPENCV_ENABLE_NONFREE=YES -DWITH_MATLAB=NO \
#    -DENABLE_PRECOMPILED_HEADERS=OFF -DCMAKE_BUILD_WITH_INSTALL_RPATH=ON -DBUILD_PERF_TESTS=OFF -DBUILD_TESTS=OFF -DINSTALL_TESTS=OFF \
#    -DBUILD_EXAMPLES=NO -DINSTALL_PYTHON_EXAMPLES=NO -DENABLE_SSE=NO -DENABLE_SSE2=NO -DENABLE_SSE3=NO -DENABLE_SSE41=NO -DENABLE_SSE42=NO \
#    -DENABLE_SSSE3=NO -DWITH_OPENCL=NO -DWITH_CUFFT=NO -DWITH_CAROTENE=NO -DWITH_CUDA=NO -DWITH_EIGEN=YES -DWITH_IPP=NO \
#    -DOPENCV_EXTRA_MODULES_PATH="$DIR/opencv_contrib/modules"  -DCMAKE_BUILD_TYPE=Release -DANDROID_SDK_TARGET=22 -DBUILD_opencv_dnn=NO \
#    -DBUILD_opencv_hdf=NO -DANDROID_ABI="$ABI" -DANDROID_SDK_BUILD_TOOLS_VERSION=28.0.3 -DBUILD_ANDROID_PROJECTS=OFF \
#    -DBUILD_ANDROID_EXAMPLES=NO -DBUILD_opencv_java=OFF -DANDROID_NATIVE_API_LEVEL=22 -DBUILD_opencv_cudacodec=OFF -DBUILD_opencv_ovis=NO \
#    -DCMAKE_INSTALL_PREFIX="$TARGET" "$DIR"
   if [ $? -eq 0 ]
   then
      rm -rf "$TARGET"
      ninja install/strip -j 9
   fi
done
